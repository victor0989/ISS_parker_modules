# =======================
# Modelo 1: OPENSCAD – Motor Híbrido Tokamak–Merlin (con aerodinámica y presión)
# =======================
#COPILOT MERLIN descriptions .
$fn = 100; // alta resolución para suavidad de curvas

// === Tobera estilo Merlin ===
difference() {
    cone(h = 1.2, r1 = 0.25, r2 = 0.75);
    translate([0, 0, -0.05]) cylinder(h = 1.25, r = 0.2);
}

// === Toroide Tokamak ===
translate([0, 0, 1.2])
    torus(R = 0.6, r = 0.12);

// === Solenoide central ===
translate([0, 0, 1.2])
    cylinder(h = 0.8, r = 0.08);

// === Bobinas toroidales ===
for (a = [0 : 30 : 330]) {
    rotate([0, 0, a])
    translate([0.6, 0, 1.2])
        rotate([90, 0, 0])
            torus(R = 0.05, r = 0.015);
}

// === Inyector de deuterio ===
translate([0.75, 0, 1.3]) rotate([0, 90, 0]) cylinder(h = 0.2, r = 0.02);

// === Conductos de refrigeración ===
for (a = [0 : 120 : 360]) {
    rotate([0, 0, a])
    translate([0.55, 0, 1.4]) cylinder(h = 0.25, r = 0.01);
}

// === Escudo térmico externo ===
difference() {
    translate([0, 0, 1.15]) cylinder(h = 0.3, r = 0.8);
    translate([0, 0, 1.15]) cylinder(h = 0.3, r = 0.7);
}

// === Alabes aerodinámicos ===
for (i = [0 : 90 : 360]) {
    rotate([0, 0, i])
    translate([0.9, 0, 0.3])
        cube([0.02, 0.2, 0.05]);
}

// === Sensores ===
translate([0.6, 0, 1.2]) color("red") sphere(r = 0.015);
translate([0, 0.6, 1.2]) color("blue") sphere(r = 0.015);

// === Nodo de control ===
translate([-0.4, 0, 1.35]) cube([0.1, 0.05, 0.05], center = true);

module torus(R, r) {
    rotate_extrude(angle = 360)
        translate([R, 0, 0])
            circle(r);
}

# =======================
# Modelo 2: Blender (Python API) – Insertar desde script
# =======================
import bpy
import math

bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# Crear tobera (cono)
bpy.ops.mesh.primitive_cone_add(vertices=128, radius1=0.75, radius2=0.25, depth=1.2, location=(0,0,0))

# Crear toroide tokamak
bpy.ops.mesh.primitive_torus_add(major_radius=0.6, minor_radius=0.12, location=(0, 0, 1.2))

# Solenoide central
bpy.ops.mesh.primitive_cylinder_add(radius=0.08, depth=0.8, location=(0,0,1.2))

# Bobinas toroidales
for angle in range(0, 360, 30):
    x = 0.6 * math.cos(math.radians(angle))
    y = 0.6 * math.sin(math.radians(angle))
    bpy.ops.mesh.primitive_torus_add(major_radius=0.05, minor_radius=0.015, location=(x,y,1.2), rotation=(math.pi/2,0,0))

# Inyector de deuterio
bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.2, location=(0.75, 0, 1.3), rotation=(0, math.pi/2, 0))

# Alabes aerodinámicos
for angle in range(0, 360, 90):
    x = 0.9 * math.cos(math.radians(angle))
    y = 0.9 * math.sin(math.radians(angle))
    bpy.ops.mesh.primitive_cube_add(size=0.05, location=(x,y,0.3))

# Sensores
bpy.ops.mesh.primitive_uv_sphere_add(radius=0.015, location=(0.6, 0, 1.2))
bpy.ops.mesh.primitive_uv_sphere_add(radius=0.015, location=(0, 0.6, 1.2))

# Nodo de control
bpy.ops.mesh.primitive_cube_add(size=0.05, location=(-0.4, 0, 1.35))

# =======================
# Modelo 3: Python con nodos de simulación (temperatura, campo magnético, presión)
# =======================
import math

class Sensor:
    def __init__(self, id, type, position):
        self.id = id
        self.type = type  # 'thermal', 'magnetic', or 'pressure'
        self.position = position
        self.value = 0

    def read(self, t):
        if self.type == 'thermal':
            self.value = 300 + 50 * math.sin(t / 10)  # Kelvin
        elif self.type == 'magnetic':
            self.value = 4 + math.sin(t / 5)  # Tesla
        elif self.type == 'pressure':
            self.value = 2 + 0.5 * math.cos(t / 8)  # atm
        return self.value

sensors = [
    Sensor("T1", "thermal", (0.6, 0, 1.2)),
    Sensor("B1", "magnetic", (0, 0.6, 1.2)),
    Sensor("P1", "pressure", (0, 0, 0.5))
]

# Simular 100 segundos
time_series = []
for t in range(100):
    readings = {s.id: s.read(t) for s in sensors}
    time_series.append(readings)

# Mostrar 5 primeros registros
for r in time_series[:5]:
    print(r)
